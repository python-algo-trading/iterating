{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ec17aa3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import json\n",
    "import re\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import numpy.random as random\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from io import StringIO\n",
    "\n",
    "from matplotlib.pyplot import figure\n",
    "\n",
    "API_KEY = '771S6K1TQH832PEU'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d800a25a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_alphavantage_data(f, symbol, interval = None):\n",
    "    url = 'https://www.alphavantage.co/query'\n",
    "    payload = {\n",
    "        'function': f,\n",
    "        'symbol': symbol,\n",
    "        'apikey': API_KEY,\n",
    "        'interval': interval,\n",
    "        'datatype': 'csv',\n",
    "        'outputsize': 'full'\n",
    "        \n",
    "    }\n",
    "    \n",
    "    r = requests.get(url, params=payload)\n",
    "    return r.text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "984cccd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "map_intervals = {\n",
    "        'Daily': 'B',\n",
    "        '5min': '5min'\n",
    "    }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f30e113c",
   "metadata": {},
   "outputs": [],
   "source": [
    "interval = 'Daily'\n",
    "data = get_alphavantage_data('TIME_SERIES_DAILY', 'TLSA', interval)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "61ff7c3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def to_dataframe(csv):\n",
    "    return pd.read_csv(StringIO(csv))\n",
    "\n",
    "def to_dataframe_frequently(json, interval):\n",
    "    keys = list(json.keys())\n",
    "    keys.sort()\n",
    "    index = pd.date_range(start = keys[0], end = keys[-1], freq = map_intervals[interval])\n",
    "    columns = json[keys[0]].keys()\n",
    "    df = pd.DataFrame(index = index, columns = columns)\n",
    "    values = {}\n",
    "    for key in index:\n",
    "        if str(key) in keys:\n",
    "            values = json[str(key)]\n",
    "        for json_key in values:\n",
    "            df.loc[key, json_key] = values[json_key]\n",
    "    return df\n",
    "\n",
    "df = to_dataframe(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d0f9ebcc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "      <th>volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-07-09</td>\n",
       "      <td>2.22</td>\n",
       "      <td>2.25</td>\n",
       "      <td>2.1000</td>\n",
       "      <td>2.20</td>\n",
       "      <td>146769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-07-08</td>\n",
       "      <td>2.19</td>\n",
       "      <td>2.30</td>\n",
       "      <td>2.1500</td>\n",
       "      <td>2.25</td>\n",
       "      <td>251290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-07-07</td>\n",
       "      <td>2.21</td>\n",
       "      <td>2.25</td>\n",
       "      <td>2.1100</td>\n",
       "      <td>2.25</td>\n",
       "      <td>170100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-07-06</td>\n",
       "      <td>2.27</td>\n",
       "      <td>2.32</td>\n",
       "      <td>2.2000</td>\n",
       "      <td>2.22</td>\n",
       "      <td>324615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-07-02</td>\n",
       "      <td>2.36</td>\n",
       "      <td>2.36</td>\n",
       "      <td>2.2200</td>\n",
       "      <td>2.25</td>\n",
       "      <td>260380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>657</th>\n",
       "      <td>2018-11-27</td>\n",
       "      <td>8.80</td>\n",
       "      <td>9.00</td>\n",
       "      <td>8.5000</td>\n",
       "      <td>8.96</td>\n",
       "      <td>4400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>658</th>\n",
       "      <td>2018-11-26</td>\n",
       "      <td>9.70</td>\n",
       "      <td>9.70</td>\n",
       "      <td>7.7600</td>\n",
       "      <td>8.38</td>\n",
       "      <td>5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>659</th>\n",
       "      <td>2018-11-23</td>\n",
       "      <td>11.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>9.7927</td>\n",
       "      <td>9.80</td>\n",
       "      <td>3019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>660</th>\n",
       "      <td>2018-11-21</td>\n",
       "      <td>9.19</td>\n",
       "      <td>12.17</td>\n",
       "      <td>9.1900</td>\n",
       "      <td>10.59</td>\n",
       "      <td>7800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>661</th>\n",
       "      <td>2018-11-20</td>\n",
       "      <td>10.50</td>\n",
       "      <td>10.50</td>\n",
       "      <td>8.3500</td>\n",
       "      <td>8.35</td>\n",
       "      <td>17500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>662 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      timestamp   open   high     low  close  volume\n",
       "0    2021-07-09   2.22   2.25  2.1000   2.20  146769\n",
       "1    2021-07-08   2.19   2.30  2.1500   2.25  251290\n",
       "2    2021-07-07   2.21   2.25  2.1100   2.25  170100\n",
       "3    2021-07-06   2.27   2.32  2.2000   2.22  324615\n",
       "4    2021-07-02   2.36   2.36  2.2200   2.25  260380\n",
       "..          ...    ...    ...     ...    ...     ...\n",
       "657  2018-11-27   8.80   9.00  8.5000   8.96    4400\n",
       "658  2018-11-26   9.70   9.70  7.7600   8.38    5000\n",
       "659  2018-11-23  11.00  11.00  9.7927   9.80    3019\n",
       "660  2018-11-21   9.19  12.17  9.1900  10.59    7800\n",
       "661  2018-11-20  10.50  10.50  8.3500   8.35   17500\n",
       "\n",
       "[662 rows x 6 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b842e690",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7a4fa8d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_df(df, column = 'open'):\n",
    "    plt.style.use('ggplot')\n",
    "    figure(figsize=(6, 6), dpi=80)\n",
    "    plt.plot(df.index, df[column])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9b412bf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5453a13a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
